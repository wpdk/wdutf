/*-
 *  SPDX-License-Identifier: BSD-3-Clause
 *
 *  Copyright (c) 1998-2015, DataCore Software Corporation. All rights reserved.
 *  Copyright (c) 2024, rtegrity ltd. All rights reserved.
 *
 *  Details about the Windows Kernel API are based on the documentation
 *  available at https://learn.microsoft.com/en-us/windows-hardware/drivers/
 */

/*
 *	Device Tests
 */

#include "stdafx.h"
#include "initguid.h"


namespace DdkUnitTest
{
	DEFINE_GUID(DEVICE_TEST_GUID, 0x60b01b68, 0x7d9b, 0x413f, 0x8f, 0xc0, 0xfe, 0x4e, 0x75, 0x31, 0xd0, 0x80);

	TEST_CLASS(DdkDeviceTest)
	{
		PDRIVER_OBJECT pDriver;
		PDEVICE_OBJECT pDevice;
		PFILE_OBJECT pFile;
		UNICODE_STRING u;
		UNICODE_STRING symLinkName;
		PWSTR symLinkList;
		
		char DriverName[100];
		wchar_t DeviceName[100];

		static NTSTATUS DriverEntry(PDRIVER_OBJECT DriverObject, PUNICODE_STRING RegistryPath)
		{
			DdkDeviceTest *pTest = (DdkDeviceTest *)_wtoll(&DriverObject->DriverName.Buffer[3]);
			pTest->pDriver = DriverObject;
			return STATUS_SUCCESS;
		}

	public:

		TEST_METHOD_INITIALIZE(DdkDeviceTestInit)
		{
			DdkThreadInit();

			sprintf(DriverName, "DRV%I64d:%d", (LONGLONG)this, GetUniqueId());
			swprintf(DeviceName, sizeof(DeviceName) / sizeof(WCHAR),
				L"\\Device\\D%I64d:%d", (LONGLONG)this, GetUniqueId());

			pDriver = 0;
			pDevice = 0;
			pFile = 0;
			RtlInitUnicodeString(&u, DeviceName);
			RtlInitUnicodeString(&symLinkName, NULL);
			symLinkList = NULL;

			NTSTATUS rc = DdkInitDriver(DriverName, DriverEntry);

			Assert::IsTrue(rc == STATUS_SUCCESS);
			Assert::IsNotNull(pDriver);
		}

		TEST_METHOD_CLEANUP(DdkDeviceTestCleanup)
		{
			if (pFile) ObDereferenceObject(pFile);
			if (pDevice) IoDeleteDevice(pDevice);
			if (pDriver) DdkUnloadDriver(DriverName);

			RtlFreeUnicodeString(&symLinkName);
			if (symLinkList) ExFreePool(symLinkList);
		}

		TEST_METHOD(DdkDeviceCreate)
		{
			NTSTATUS rc = IoCreateDevice(pDriver, 200, &u, FILE_DEVICE_DISK, 0, FALSE, &pDevice);
			Assert::IsTrue(NT_SUCCESS(rc));
			Assert::IsNotNull(pDevice);
		}

		TEST_METHOD(DdkDeviceCreateExists)
		{
			NTSTATUS rc = IoCreateDevice(pDriver, 200, &u, FILE_DEVICE_DISK, 0, FALSE, &pDevice);
			Assert::IsTrue(rc == STATUS_SUCCESS);
			Assert::IsNotNull(pDevice);

			rc = IoCreateDevice(pDriver, 200, &u, FILE_DEVICE_DISK, 0, FALSE, &pDevice);
			Assert::IsTrue(rc == STATUS_OBJECT_NAME_EXISTS);
		}

		TEST_METHOD(DdkDeviceCreateAutoGen)
		{
			NTSTATUS rc = IoCreateDevice(pDriver, 200, NULL, FILE_DEVICE_DISK,
				FILE_AUTOGENERATED_DEVICE_NAME, FALSE, &pDevice);

			Assert::IsTrue(rc == STATUS_SUCCESS);
		}

		TEST_METHOD(DdkDeviceCreateNoName)
		{
			NTSTATUS rc = IoCreateDevice(pDriver, 200, NULL, FILE_DEVICE_DISK, 0, FALSE, &pDevice);
			Assert::IsTrue(rc == STATUS_SUCCESS);
		}

		TEST_METHOD(DdkDeviceGetObjectPointer)
		{
			DEVICE_OBJECT *pDevice2;

			NTSTATUS rc = IoCreateDevice(pDriver, 200, &u, FILE_DEVICE_DISK, 0, FALSE, &pDevice);
			Assert::IsTrue(NT_SUCCESS(rc));
			Assert::IsNotNull(pDevice);

			rc = IoGetDeviceObjectPointer(&u, 0, &pFile, &pDevice2);
			Assert::IsTrue(NT_SUCCESS(rc));
			Assert::IsNotNull(pDevice2);

			Assert::IsTrue(pDevice == pDevice2);
			Assert::IsTrue(pFile->DeviceObject == pDevice);
		}

		TEST_METHOD(DdkDeviceRegisterInterface)
		{
			NTSTATUS rc = IoCreateDevice(pDriver, 200, &u, FILE_DEVICE_DISK, 0, FALSE, &pDevice);
			Assert::IsTrue(NT_SUCCESS(rc));
			Assert::IsNotNull(pDevice);

			rc = IoRegisterDeviceInterface(pDevice, &DEVICE_TEST_GUID, NULL, &symLinkName);
			Assert::IsTrue(NT_SUCCESS(rc));
		}

		TEST_METHOD(DdkDeviceReRegisterInterface)
		{
			NTSTATUS rc = IoCreateDevice(pDriver, 200, &u, FILE_DEVICE_DISK, 0, FALSE, &pDevice);
			Assert::IsTrue(NT_SUCCESS(rc));
			Assert::IsNotNull(pDevice);

			rc = IoRegisterDeviceInterface(pDevice, &DEVICE_TEST_GUID, NULL, &symLinkName);
			Assert::IsTrue(NT_SUCCESS(rc));

			RtlFreeUnicodeString(&symLinkName);

			rc = IoRegisterDeviceInterface(pDevice, &DEVICE_TEST_GUID, NULL, &symLinkName);
			Assert::IsTrue(STATUS_OBJECT_NAME_EXISTS == rc);
		}

		TEST_METHOD(DdkDeviceEnableInterface)
		{
			NTSTATUS rc = IoCreateDevice(pDriver, 200, &u, FILE_DEVICE_DISK, 0, FALSE, &pDevice);
			Assert::IsTrue(NT_SUCCESS(rc));
			Assert::IsNotNull(pDevice);

			rc = IoRegisterDeviceInterface(pDevice, &DEVICE_TEST_GUID, NULL, &symLinkName);
			Assert::IsTrue(NT_SUCCESS(rc));

			rc = IoSetDeviceInterfaceState(&symLinkName, TRUE);
			Assert::IsTrue(NT_SUCCESS(rc));
		}

		TEST_METHOD(DdkDeviceReEnableInterface)
		{
			NTSTATUS rc = IoCreateDevice(pDriver, 200, &u, FILE_DEVICE_DISK, 0, FALSE, &pDevice);
			Assert::IsTrue(NT_SUCCESS(rc));
			Assert::IsNotNull(pDevice);

			rc = IoRegisterDeviceInterface(pDevice, &DEVICE_TEST_GUID, NULL, &symLinkName);
			Assert::IsTrue(NT_SUCCESS(rc));

			rc = IoSetDeviceInterfaceState(&symLinkName, TRUE);
			Assert::IsTrue(NT_SUCCESS(rc));

			rc = IoSetDeviceInterfaceState(&symLinkName, TRUE);
			Assert::IsTrue(STATUS_OBJECT_NAME_EXISTS == rc);
		}

		TEST_METHOD(DdkDeviceDisableNewInterface)
		{
			NTSTATUS rc = IoCreateDevice(pDriver, 200, &u, FILE_DEVICE_DISK, 0, FALSE, &pDevice);
			Assert::IsTrue(NT_SUCCESS(rc));
			Assert::IsNotNull(pDevice);

			rc = IoRegisterDeviceInterface(pDevice, &DEVICE_TEST_GUID, NULL, &symLinkName);
			Assert::IsTrue(NT_SUCCESS(rc));

			rc = IoSetDeviceInterfaceState(&symLinkName, FALSE);
			Assert::IsTrue(STATUS_OBJECT_NAME_NOT_FOUND == rc);
		}

		TEST_METHOD(DdkDeviceDisableInterface)
		{
			NTSTATUS rc = IoCreateDevice(pDriver, 200, &u, FILE_DEVICE_DISK, 0, FALSE, &pDevice);
			Assert::IsTrue(NT_SUCCESS(rc));
			Assert::IsNotNull(pDevice);

			rc = IoRegisterDeviceInterface(pDevice, &DEVICE_TEST_GUID, NULL, &symLinkName);
			Assert::IsTrue(NT_SUCCESS(rc));

			rc = IoSetDeviceInterfaceState(&symLinkName, TRUE);
			Assert::IsTrue(NT_SUCCESS(rc));

			rc = IoSetDeviceInterfaceState(&symLinkName, FALSE);
			Assert::IsTrue(NT_SUCCESS(rc));
		}

		TEST_METHOD(DdkDeviceGetInterfaces)
		{
			NTSTATUS rc = IoCreateDevice(pDriver, 200, &u, FILE_DEVICE_DISK, 0, FALSE, &pDevice);
			Assert::IsTrue(NT_SUCCESS(rc));
			Assert::IsNotNull(pDevice);

			rc = IoRegisterDeviceInterface(pDevice, &DEVICE_TEST_GUID, NULL, &symLinkName);
			Assert::IsTrue(NT_SUCCESS(rc));

			rc = IoSetDeviceInterfaceState(&symLinkName, TRUE);
			Assert::IsTrue(NT_SUCCESS(rc));

			rc = IoGetDeviceInterfaces(&DEVICE_TEST_GUID, pDevice, 0, &symLinkList);
			Assert::IsTrue(NT_SUCCESS(rc));
			Assert::IsTrue(RtlCompareUnicodeStrings(symLinkName.Buffer, symLinkName.Length, symLinkList, symLinkName.Length, FALSE) == 0);

			ExFreePool(symLinkList);
			symLinkList = NULL;

			rc = IoGetDeviceInterfaces(&DEVICE_TEST_GUID, pDevice, DEVICE_INTERFACE_INCLUDE_NONACTIVE, &symLinkList);
			Assert::IsTrue(NT_SUCCESS(rc));
			Assert::IsTrue(RtlCompareUnicodeStrings(symLinkName.Buffer, symLinkName.Length, symLinkList, symLinkName.Length, FALSE) == 0);
		}

		TEST_METHOD(DdkDeviceGetInterfacesNull)
		{
			NTSTATUS rc = IoCreateDevice(pDriver, 200, &u, FILE_DEVICE_DISK, 0, FALSE, &pDevice);
			Assert::IsTrue(NT_SUCCESS(rc));
			Assert::IsNotNull(pDevice);

			rc = IoGetDeviceInterfaces(&DEVICE_TEST_GUID, pDevice, 0, &symLinkList);
			Assert::IsTrue(NT_SUCCESS(rc));
			Assert::IsTrue(UNICODE_NULL == *symLinkList);
		}

		TEST_METHOD(DdkDeviceGetInterfacesDisabled)
		{
			NTSTATUS rc = IoCreateDevice(pDriver, 200, &u, FILE_DEVICE_DISK, 0, FALSE, &pDevice);
			Assert::IsTrue(NT_SUCCESS(rc));
			Assert::IsNotNull(pDevice);

			rc = IoRegisterDeviceInterface(pDevice, &DEVICE_TEST_GUID, NULL, &symLinkName);
			Assert::IsTrue(NT_SUCCESS(rc));

			rc = IoGetDeviceInterfaces(&DEVICE_TEST_GUID, pDevice, 0, &symLinkList);
			Assert::IsTrue(NT_SUCCESS(rc));
			Assert::IsTrue(UNICODE_NULL == *symLinkList);

			ExFreePool(symLinkList);
			symLinkList = NULL;

			rc = IoGetDeviceInterfaces(&DEVICE_TEST_GUID, pDevice, DEVICE_INTERFACE_INCLUDE_NONACTIVE, &symLinkList);
			Assert::IsTrue(NT_SUCCESS(rc));
			Assert::IsTrue(RtlCompareUnicodeStrings(symLinkName.Buffer, symLinkName.Length, symLinkList, symLinkName.Length, FALSE) == 0);
		}

		TEST_METHOD(DdkDeviceGetInterfacesDeleted)
		{
			NTSTATUS rc = IoCreateDevice(pDriver, 200, &u, FILE_DEVICE_DISK, 0, FALSE, &pDevice);
			Assert::IsTrue(NT_SUCCESS(rc));
			Assert::IsNotNull(pDevice);

			rc = IoRegisterDeviceInterface(pDevice, &DEVICE_TEST_GUID, NULL, &symLinkName);
			Assert::IsTrue(NT_SUCCESS(rc));

			IoDeleteDevice(pDevice);
			pDevice = NULL;

			rc = IoGetDeviceInterfaces(&DEVICE_TEST_GUID, pDevice, 0, &symLinkList);
			Assert::IsTrue(NT_SUCCESS(rc));
			Assert::IsTrue(UNICODE_NULL == *symLinkList);
		}
	};
}
